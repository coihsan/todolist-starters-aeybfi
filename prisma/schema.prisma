generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// USER SECTION
enum Role {
  WORKSPACE_OWNER
  WORKSPACE_TEAM_MEMBER
  USER_ID
}
enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}
model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  avatarUrl   String         @db.Text
  name        String?
  address     Address?
  posts       Post[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]
}

enum Plan {
  price_1OYxkqFj9oKEERu1NbKUxXxN
  price_1OYxkqFj9oKEERu1KfJGWxgN
}

model Subscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan      Plan?
  price     String?
  active    Boolean  @default(false)

  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscritiptionId     String   @unique

  userId String? @unique
  Agency   Agency? @relation(fields: [agencyId], references: [id])

  @@index([customerId])
}
// Address is an embedded document

type Address {
  street String
  city   String
  state  String
  zip    String
}

model Post {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  slug     String    @unique
  title    String
  body     String
  author   User      @relation(fields: [authorId], references: [id])
  authorId String    @db.ObjectId
  comments Comment[]
}



model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  comment String
  post    Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId
}



model Tag {
  id           String   @id @default(uuid())
  name         String
  color        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  subAccountId String

  SubAccount SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Ticket     Ticket[]

  @@index([subAccountId])
}
model Workspace {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  worksSpaceLogo    String?   @db.Text
  workspaceName     String
  workspaceId       String
  createAt          String
  updateAt          String?
  createdBy         String
  description       String?
}
model Team {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  asTeam           String
}